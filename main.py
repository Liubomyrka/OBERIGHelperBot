import logging
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import datetime
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build

# –î–æ–∑–≤–æ–ª—è—î–º–æ –ø–æ–≤—Ç–æ—Ä–Ω–∏–π –∑–∞–ø—É—Å–∫ —Ü–∏–∫–ª—É –ø–æ–¥—ñ–π —É Colab
nest_asyncio.apply()

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –¢–æ–∫–µ–Ω
TOKEN = "–í–ê–®_–¢–û–ö–ï–ù"

# –î–∞–Ω—ñ –≤–∞—à–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
CALENDAR_ID = "–í–ê–®_ID_–ö–ê–õ–ï–ù–î–ê–†–Ø"

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö Google Calendar
def get_google_calendar_service():
    SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']
    creds = Credentials.from_service_account_file("oberig-credentials.json", scopes=SCOPES)
    service = build('calendar', 'v3', credentials=creds)
    return service

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n/help - –î–æ–ø–æ–º–æ–≥–∞\n/rozklad - –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π")

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∏:\n/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n/help - –î–æ–ø–æ–º–æ–≥–∞\n/rozklad - –†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π")

# –ö–æ–º–∞–Ω–¥–∞ /rozklad
async def rozklad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    events = get_calendar_events()
    if not events:
        await update.message.reply_text("–ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
    else:
        message = "üìÖ *–†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π:*\n\n"
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            start_time = datetime.datetime.fromisoformat(start).strftime('%d-%m-%Y %H:%M')
            message += f"‚Ä¢ {event['summary']} (üìÜ {start_time})\n"
        await update.message.reply_text(message, parse_mode='Markdown')

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("rozklad", rozklad))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    await application.run_polling()

# –í–∏–∫–ª–∏–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
await main()
