# main.py

import asyncio
from telegram import BotCommand, Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from handlers.start_handler import start
from handlers.help_handler import help_command
from handlers.schedule_handler import (
    schedule_command,
    set_reminder,
    unset_reminder,
    event_details_callback,
)
from utils.logger import logger


# üõ°Ô∏è –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
async def log_command(command_name: str, success: bool):
    if success:
        logger.info(f"‚úÖ –í–∏–∫–æ–Ω–∞–Ω–æ –∫–æ–º–∞–Ω–¥—É: {command_name}")
    else:
        logger.warning(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥–∏: {command_name}")


# üõ°Ô∏è –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.warning("‚ö†Ô∏è –û—Ç—Ä–∏–º–∞–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞")
    if update.effective_chat.type != "private":
        await update.message.reply_text(
            "‚ùó –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö. "
            "[–ù–∞–ø–∏—à—ñ—Ç—å –º–µ–Ω—ñ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç](https://t.me/OBERIGHelperBot).",
            parse_mode="Markdown"
        )
    else:
        await help_command(update, context)
    logger.info("‚úÖ –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–æ—ó –∫–æ–º–∞–Ω–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")


# üõ°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {context.error}")
    if update and hasattr(update, 'message'):
        await update.message.reply_text(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –≤–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞. –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å–ø–æ–≤—ñ—â–µ–Ω–∏–π."
        )


# üõ°Ô∏è –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –∑–∞–ø—É—Å–∫—É
async def main():
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –¥–æ–¥–∞—Ç–∫–∞...")

    application = ApplicationBuilder().token("7730295760:AAF7Os85EY6E-ucV7vVJ48JVSovPjF-DyTA").build()
    
    # –ö–æ–º–∞–Ω–¥–∏ –¥–ª—è –º–µ–Ω—é –±–æ—Ç–∞
    logger.info("üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é –¥–ª—è –±–æ—Ç–∞...")
    await application.bot.set_my_commands([
        BotCommand("start", "–í—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è"),
        BotCommand("help", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
        BotCommand("rozklad", "–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π"),
        BotCommand("reminder_on", "–£–≤—ñ–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"),
        BotCommand("reminder_off", "–í–∏–º–∫–Ω—É—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"),
    ], scope=None)
    logger.info("‚úÖ –ö–æ–º–∞–Ω–¥–∏ –º–µ–Ω—é –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ")

    # üõ°Ô∏è –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
    logger.info("üîß –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥...")

    application.add_handler(CommandHandler("start", start))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏: /start")

    application.add_handler(CommandHandler("help", help_command))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏: /help")

    application.add_handler(CommandHandler("rozklad", schedule_command))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏: /rozklad")

    application.add_handler(CommandHandler("reminder_on", set_reminder))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏: /reminder_on")

    application.add_handler(CommandHandler("reminder_off", unset_reminder))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏: /reminder_off")

    application.add_handler(CallbackQueryHandler(event_details_callback, pattern="^event_details_.*$"))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥—ñ–π")

    # üõ°Ô∏è –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(MessageHandler(filters.COMMAND, unknown_command))
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –æ–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥")

    # üõ°Ô∏è –ì–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫
    application.add_error_handler(error_handler)
    logger.info("‚úÖ –î–æ–¥–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫")

    logger.info("‚úÖ *OBERIG Bot –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!* üöÄ\nüîÑ –û—á—ñ–∫—É—é –Ω–∞ –∫–æ–º–∞–Ω–¥–∏ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...")

    try:
        await application.run_polling()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: {e}")


# üõ°Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–∏
if __name__ == "__main__":
    import nest_asyncio

    try:
        logger.info("üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è asyncio...")
        nest_asyncio.apply()
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º.")
    except RuntimeError as e:
        if "already running" in str(e):
            logger.warning("‚ö†Ô∏è Event loop is already running.")
            loop = asyncio.get_event_loop()
            loop.run_until_complete(main())
        else:
            raise e
