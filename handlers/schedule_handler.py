# schedule_handler.py

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from utils.calendar_utils import get_calendar_events
from datetime import datetime, timezone

# –°–ª–æ–≤–Ω–∏–∫ –¥–ª—è —Å—Ç–∞—Ç—É—Å—É –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
user_reminders = {}
notified_events = set()  # –ú–Ω–æ–∂–∏–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è ID –ø–æ–¥—ñ–π, –¥–ª—è —è–∫–∏—Ö –≤–∂–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è


# üõ°Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç—É
async def ensure_private_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, command: str):
    """
    –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∫–æ–º–∞–Ω–¥–∞ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è —É –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—ñ.
    –Ø–∫—â–æ –Ω—ñ ‚Äî –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –ø—Ä–∏–≤–∞—Ç–Ω–∏–π —á–∞—Ç —ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∫–æ–Ω—É—î –∫–æ–º–∞–Ω–¥—É.
    """
    if update.effective_chat.type != "private":
        try:
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=f"üîí –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö. –í–∏–∫–æ–Ω—É—é –∫–æ–º–∞–Ω–¥—É: /{command}"
            )
            await update.message.reply_text(
                "üì© –í—ñ–¥–ø–æ–≤—ñ–≤ –≤–∞–º –≤ –æ—Å–æ–±–∏—Å—Ç–æ–º—É —á–∞—Ç—ñ. [–í—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç –∑ –±–æ—Ç–æ–º](https://t.me/OBERIGHelperBot)",
                parse_mode="Markdown"
            )
            await context.bot.send_message(
                chat_id=update.effective_user.id,
                text=f"/{command}"
            )
        except:
            await update.message.reply_text(
                "‚ùó –¶—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—à–µ –≤ –æ—Å–æ–±–∏—Å—Ç–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è—Ö. "
                "[–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å —Ç—É—Ç, —â–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ —á–∞—Ç –∑—ñ –º–Ω–æ—é](https://t.me/OBERIGHelperBot)",
                parse_mode="Markdown"
            )
        return False
    return True


# üõ°Ô∏è –§—É–Ω–∫—Ü—ñ—è schedule_command
# """–í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–¥—ñ–π –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –Ω–∞ —ó—Ö –Ω–∞–∑–≤–∏ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –¥–µ—Ç–∞–ª–µ–π."""
async def schedule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_private_chat(update, context, "rozklad"):
        return

    try:
        events = get_calendar_events()
        if not events:
            await update.message.reply_text("üìÖ –ù–µ–º–∞—î –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–∏—Ö –ø–æ–¥—ñ–π.")
        else:
            response = "üìÖ **–†–æ–∑–∫–ª–∞–¥ –ø–æ–¥—ñ–π:**\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"

            buttons = []
            for index, event in enumerate(events[:5], start=1):
                event_id = event.get("id")
                summary = event.get("summary", "–ë–µ–∑ –Ω–∞–∑–≤–∏")
                start = event["start"].get("dateTime", event["start"].get("date"))

                if 'T' in start:
                    dt = datetime.fromisoformat(start)
                    start_date = dt.strftime('%d-%m-%Y')
                    start_time = dt.strftime('%H:%M')
                else:
                    dt = datetime.strptime(start, '%Y-%m-%d')
                    start_date = dt.strftime('%d-%m-%Y')
                    start_time = "–í–µ—Å—å –¥–µ–Ω—å"

                response += (
                    f"{index}Ô∏è‚É£ *{summary}*\n"
                    f"üìÖ {start_date} ‚è∞ {start_time}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                )
                # –î–æ–¥–∞–º–æ –∫–Ω–æ–ø–∫—É —è–∫ inline, –∞–ª–µ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç
                buttons.append([
                    InlineKeyboardButton(
                        text=f"‚ÑπÔ∏è {summary}",
                        callback_data=f"event_details_{event_id[:20]}"
                    )
                ])

            await update.message.reply_text(
                text=response,
                parse_mode="Markdown",
                reply_markup=InlineKeyboardMarkup(buttons)
            )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–¥—ñ–π: {e}")


# üõ°Ô∏è –§—É–Ω–∫—Ü—ñ—è event_details_callback
# """–í–∏–≤–æ–¥–∏—Ç—å –¥–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ callback-–∑–∞–ø–∏—Ç."""
async def event_details_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        event_id = query.data.replace("event_details_", "")
        events = get_calendar_events()
        event = next((e for e in events if e.get("id", "").startswith(event_id)), None)

        if event:
            description = event.get("description", "–û–ø–∏—Å –≤—ñ–¥—Å—É—Ç–Ω—ñ–π.")
            start = event["start"].get("dateTime", event["start"].get("date"))

            if 'T' in start:
                dt = datetime.fromisoformat(start)
                start_date = dt.strftime('%d-%m-%Y')
                start_time = dt.strftime('%H:%M')
            else:
                dt = datetime.strptime(start, '%Y-%m-%d')
                start_date = dt.strftime('%d-%m-%Y')
                start_time = "–í–µ—Å—å –¥–µ–Ω—å"

            response = (
                f"üìÖ **–î–µ—Ç–∞–ª—ñ –ø–æ–¥—ñ—ó:**\n"
                f"üìå **–ù–∞–∑–≤–∞:** {event['summary']}\n"
                f"üìÖ **–î–∞—Ç–∞:** {start_date}\n"
                f"‚è∞ **–ß–∞—Å:** {start_time}\n"
                f"üìù **–û–ø–∏—Å:** {description}"
            )
            await query.message.reply_text(text=response, parse_mode="Markdown")
        else:
            await query.message.reply_text("‚ùå –ü–æ–¥—ñ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")


# üîî –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def set_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_private_chat(update, context, "reminder_on"):
        return

    chat_id = update.effective_chat.id
    await update.message.reply_text("üîî –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ. –í–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ 1 –≥–æ–¥–∏–Ω—É –¥–æ –ø–æ–¥—ñ—ó.")


# üîï –í–∏–º–∫–Ω–µ–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
async def unset_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await ensure_private_chat(update, context, "reminder_off"):
        return

    chat_id = update.effective_chat.id
    await update.message.reply_text("üîï –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ.")
